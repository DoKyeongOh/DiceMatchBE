2025-03-29

1. AccountService 를 Basic, Google로 나누어 관리하려고 했던게 바람직할까?
    - 원래 생각: 입력으로 들어온 데이터의 형태나 정의 클래스만 보고 알아서 서비스 로직을 찾게끔 하고싶음
    - Account를 상속받고, Account에는 Id, Type, data가 있는게 맞을 듯.
    - data는 따로 테이블로 관리할 수 있긴하지만, 문자열로 관리하자. 테이블 관리 용이를 위함이기도함

2. AccountData 를 없애고, BasicAccount, GoogleAccount 형태로 사용하려고 했음
    - Account 부터 테이블이 나뉘어질 수 밖에 없음 (테이블을 한개로 관리한다면, Data를 쓰는 것과 동일함)
    - AccountData는 써야할 듯.
    - AccountData를 DB에 따로 저장하고, accountId를 필드로 가지도록 수정 필요함.
    - 그럼, controller -> executionService -> service -> repository 이렇게 가야할 듯

--------------------------------------

2025-03-31

1. register 시엔 account, accountData 를 생성해야함 == id가 없는채로 요청됨

2. register 시 데이터 유효성 검사를 해야함
    - ValidationService 같은게 종류별로 필요?
    - Controller -> AccountService -> (by type) AccountDataService -> (by type) AccountDataRepository

3. Basic 방식인 경우, pwHash가 처음엔 평문으로 들어오도록 만들어야할듯
    - 저장될 때 hash처리해서 저장하자.
    - pwHash -> password로 바꾸는게 맞을지도.

4. Controller 에서부터 별도로 받아야 할듯.
    - service는 공유할지라도 controller에서 나누어 받는게 나을듯.