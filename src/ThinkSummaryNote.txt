2025-03-29

1. AccountService 를 Basic, Google로 나누어 관리하려고 했던게 바람직할까?
    - 원래 생각: 입력으로 들어온 데이터의 형태나 정의 클래스만 보고 알아서 서비스 로직을 찾게끔 하고싶음
    - Account를 상속받고, Account에는 Id, Type, data가 있는게 맞을 듯.
    - data는 따로 테이블로 관리할 수 있긴하지만, 문자열로 관리하자. 테이블 관리 용이를 위함이기도함

2. AccountData 를 없애고, BasicAccount, GoogleAccount 형태로 사용하려고 했음
    - Account 부터 테이블이 나뉘어질 수 밖에 없음 (테이블을 한개로 관리한다면, Data를 쓰는 것과 동일함)
    - AccountData는 써야할 듯.
    - AccountData를 DB에 따로 저장하고, accountId를 필드로 가지도록 수정 필요함.
    - 그럼, controller -> executionService -> service -> repository 이렇게 가야할 듯

--------------------------------------

2025-03-31

1. register 시엔 account, accountData 를 생성해야함 == id가 없는채로 요청됨

2. register 시 데이터 유효성 검사를 해야함
    - ValidationService 같은게 종류별로 필요?
    - Controller -> AccountService -> (by type) AccountDataService -> (by type) AccountDataRepository

3. Basic 방식인 경우, pwHash가 처음엔 평문으로 들어오도록 만들어야할듯
    - 저장될 때 hash처리해서 저장하자.
    - pwHash -> password로 바꾸는게 맞을지도.

4. Controller 에서부터 별도로 받아야 할듯.
    - service는 공유할지라도 controller에서 나누어 받는게 나을듯.

--------------------------------------

2025-04-06

1. account 공통화는 이 데이터를 사용할 때 고민하면 됨.
    -> basic, google 계정 관리 rest는 아예 다른 분기로.
    -> account 패키지만 공유하면될듯

2. 해시 유틸에서 자체적으로 해시 키 값을 가져야할듯

3. 나중에 exception의 case를 enum으로 관리?
    -> 공통적인 것들이 많으면 합리적일듯
    -> 공통이 적으면 별로일듯
    -> 공통이 적을거같음

-------------------------------------

2025-04-13

1. 로그인 및 세션 관리에 대한 설계를 안했었음
    - 로그인 요청 시 세션 목록 체크해서 중복 로그인 안되도록 막기?
        -> 로그인 중인 모든 유저 목록을 갖고있어야함
    - 로그인 성공 시 jwt를 토큰에 발급해주기
    - 요청 필터를 통해 jwt를 판별하고, 권한에 따라 기능에 반영해야할듯

    - SessionManagementService를 사용해서 세션 맵을 관리
        -> Map<UserId, Jws>
    - 로그인 요청은 Basic/Google service 클래스에서 처리
        -> 해당 계정이 존재하는지 유무를 먼저 체크하기 위함
    - 세션 서비스에 로그인된 유저있는지 체크하기.
    - 구글로 로그인하든, 베이직으로 로그인하든 jwt가 발급되기 때문에 가능할듯